使用版本: v0.3.3
使用大测试集 (VGG16)
错误: VTune 未能成功加载，尝试其他加载方法...
VTune 版本信息：
Intel(R) VTune(TM) Profiler 2024.1.0 (build 627630) Command Line Tool
Copyright (C) 2009 Intel Corporation. All rights reserved.
===============================================
 VTune 分析报告 - 版本: v0.3.3 - 测试集: vgg16
 开始时间: Tue Mar 25 08:52:36 PM CST 2025
===============================================



--- 开始 hotspots 分析 Tue Mar 25 08:52:36 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 783.166965 ms. (   13.92 GFlops) 
Layer 1 :  Elapse time 1592.129310 ms. (  146.06 GFlops) 
Layer 2 :  Elapse time 658.431053 ms. (  173.43 GFlops) 
Layer 3 :  Elapse time 1029.697021 ms. (  221.79 GFlops) 
Layer 4 :  Elapse time 439.909935 ms. (  250.22 GFlops) 
Layer 5 :  Elapse time 808.492025 ms. (  272.30 GFlops) 
Layer 6 :  Elapse time 816.584031 ms. (  269.60 GFlops) 
Layer 7 :  Elapse time 809.117397 ms. (  272.09 GFlops) 
Layer 8 :  Elapse time 371.886969 ms. (  274.47 GFlops) 
Layer 9 :  Elapse time 661.209265 ms. (  308.75 GFlops) 
Layer 10:  Elapse time 656.167984 ms. (  311.12 GFlops) 
Layer 11:  Elapse time 644.719044 ms. (  316.64 GFlops) 
Layer 12:  Elapse time 147.791624 ms. (  294.24 GFlops) 
Layer 13:  Elapse time 133.488019 ms. (  325.77 GFlops) 
Layer 14:  Elapse time 134.692669 ms. (  322.86 GFlops) 
Layer 15:  Elapse time 133.791685 ms. (  325.03 GFlops) 
Total elapse time: 9.821275. (  228.59 GFlops) 
Elapsed Time: 30.556s
    CPU Time: 331.020s
        Effective Time: 331.020s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 64
    Paused Time: 0s

Top Hotspots
Function                          Module    CPU Time  % of CPU Time(%)
--------------------------------  --------  --------  ----------------
sgemm                             winograd  148.116s             44.7%
output_unpacking_store._omp_fn.0  winograd   31.993s              9.7%
image_packing._omp_fn.0           winograd   30.942s              9.3%
image_transform._omp_fn.0         winograd   29.708s              9.0%
output_transform._omp_fn.0        winograd   28.444s              8.6%
[Others]                          N/A        61.816s             18.7%
Effective CPU Utilization: 17.1%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 10.962 out of 64
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 11.4 MB 
    Collection start time: 12:52:39 25/03/2025 UTC
    Collection stop time: 12:53:10 25/03/2025 UTC
    Collector Type: Driverless Perf per-process counting,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: hotspots
结果保存在: vtune_results/v0.3.3-vgg16/hotspots_vgg16_20250325_205236



--- 开始 memory-access 分析 Tue Mar 25 08:53:16 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 785.005649 ms. (   13.89 GFlops) 
Layer 1 :  Elapse time 1599.726995 ms. (  145.37 GFlops) 
Layer 2 :  Elapse time 655.136347 ms. (  174.30 GFlops) 
Layer 3 :  Elapse time 992.855310 ms. (  230.02 GFlops) 
Layer 4 :  Elapse time 422.618310 ms. (  260.46 GFlops) 
Layer 5 :  Elapse time 801.911036 ms. (  274.53 GFlops) 
Layer 6 :  Elapse time 810.482979 ms. (  271.63 GFlops) 
Layer 7 :  Elapse time 800.635020 ms. (  274.97 GFlops) 
Layer 8 :  Elapse time 359.462659 ms. (  283.96 GFlops) 
Layer 9 :  Elapse time 636.507988 ms. (  320.73 GFlops) 
Layer 10:  Elapse time 639.643669 ms. (  319.15 GFlops) 
Layer 11:  Elapse time 638.574600 ms. (  319.69 GFlops) 
Layer 12:  Elapse time 125.385364 ms. (  346.82 GFlops) 
Layer 13:  Elapse time 123.607953 ms. (  351.81 GFlops) 
Layer 14:  Elapse time 124.311050 ms. (  349.82 GFlops) 
Layer 15:  Elapse time 123.794317 ms. (  351.28 GFlops) 
Total elapse time: 9.639659. (  232.89 GFlops) 
Elapsed Time: 29.457s
    CPU Time: 276.338s
    Memory Bound: 100.0% of Pipeline Slots
     | The metric value is high. This may indicate that a significant fraction
     | of execution pipeline slots could be stalled due to demand memory load
     | and stores. Explore the metric breakdown by memory hierarchy, memory
     | bandwidth information, and correlation by memory objects.
     |
        L1 Bound: 10.5% of Clockticks
         | This metric shows how often machine was stalled without missing the
         | L1 data cache. The L1 cache typically has the shortest latency.
         | However, in certain cases like loads blocked on older stores, a load
         | might suffer a high latency even though it is being satisfied by the
         | L1.
         |
        L2 Bound: 5.9% of Clockticks
         | This metric shows how often machine was stalled on L2 cache. Avoiding
         | cache misses (L1 misses/L2 hits) will improve the latency and
         | increase performance.
         |
        L3 Bound: 1.2% of Clockticks
        DRAM Bound: 2.1% of Clockticks
            DRAM Bandwidth Bound: 4.0% of Elapsed Time
        Store Bound: 10.7% of Clockticks
        NUMA: % of Remote Accesses: 0.0%
        UPI Utilization Bound: 0.0% of Elapsed Time
    Loads: 184,140,611,400
    Stores: 36,224,678,649
    LLC Miss Count: 99,328,052
        Local Memory Access Count: 104,452,009
        Remote Memory Access Count: 0
        Remote Cache Access Count: 0
    Total Thread Count: 65
    Paused Time: 0s

Bandwidth Utilization
Bandwidth Domain                  Platform Maximum  Observed Maximum  Average  % of Elapsed Time with High BW Utilization(%)
--------------------------------  ----------------  ----------------  -------  ---------------------------------------------
DRAM, GB/sec                      178                        210.100   17.300                                           0.5%
DRAM Single-Package, GB/sec       105                        209.900   17.519                                           4.0%
UPI Utilization Single-link, (%)  100                          2.700    0.032                                           0.0%
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 201.5 MB 
    Collection start time: 12:53:34 25/03/2025 UTC
    Collection stop time: 12:54:04 25/03/2025 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        Max DRAM Single-Package Bandwidth: 105.000 GB/s
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: memory-access
结果保存在: vtune_results/v0.3.3-vgg16/memory-access_vgg16_20250325_205236



--- 开始 threading 分析 Tue Mar 25 08:54:18 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 798.213005 ms. (   13.66 GFlops) 
Layer 1 :  Elapse time 1588.032643 ms. (  146.44 GFlops) 
Layer 2 :  Elapse time 686.433633 ms. (  166.35 GFlops) 
Layer 3 :  Elapse time 987.762372 ms. (  231.21 GFlops) 
Layer 4 :  Elapse time 437.840621 ms. (  251.40 GFlops) 
Layer 5 :  Elapse time 813.216607 ms. (  270.72 GFlops) 
Layer 6 :  Elapse time 816.785653 ms. (  269.53 GFlops) 
Layer 7 :  Elapse time 817.270676 ms. (  269.37 GFlops) 
Layer 8 :  Elapse time 394.383987 ms. (  258.82 GFlops) 
Layer 9 :  Elapse time 660.213312 ms. (  309.21 GFlops) 
Layer 10:  Elapse time 665.200710 ms. (  306.89 GFlops) 
Layer 11:  Elapse time 665.723006 ms. (  306.65 GFlops) 
Layer 12:  Elapse time 160.113335 ms. (  271.60 GFlops) 
Layer 13:  Elapse time 136.325359 ms. (  318.99 GFlops) 
Layer 14:  Elapse time 143.996318 ms. (  302.00 GFlops) 
Layer 15:  Elapse time 150.296370 ms. (  289.34 GFlops) 
Total elapse time: 9.921808. (  226.27 GFlops) 
Elapsed Time: 30.872s
    Paused Time: 0s
Effective CPU Utilization: 17.0% (10.903 out of 64 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Total Thread Count: 65
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.000s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                                   Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        ----------------------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream conf/vgg16.conf 0x4e2c38dc                                                                          0.000s                        100.0%           1
        Stream /proc/self/status 0x3791b3a6                                                                        0.000s                        100.0%           1
        Stream /sys/devices/system/cpu/cpu0/topology/core_siblings_list 0x69712aff                                 0.000s                        100.0%           1
        Stream /sys/devices/system/node/node2/meminfo 0xb3eede6d                                                   0.000s                        100.0%           1
        Stream /sys/devices/system/cpu/cpu2/topology/thread_siblings_list 0x8b73d7cf                               0.000s                        100.0%           1
        [Others]                                                                                                   0.000s                        100.0%          20
    Spin and Overhead Time: 0s (0.0% of CPU Time)

        Top Functions with Spin or Overhead Time
        Function  Module  Spin and Overhead Time  (% from CPU Time)(%)
        --------  ------  ----------------------  --------------------
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 11.5 MB 
    Collection start time: 12:54:21 25/03/2025 UTC
    Collection stop time: 12:54:52 25/03/2025 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: threading
结果保存在: vtune_results/v0.3.3-vgg16/threading_vgg16_20250325_205236



--- 开始 uarch-exploration 分析 Tue Mar 25 08:54:58 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 762.548288 ms. (   14.30 GFlops) 
Layer 1 :  Elapse time 1600.566308 ms. (  145.29 GFlops) 
Layer 2 :  Elapse time 655.859391 ms. (  174.11 GFlops) 
Layer 3 :  Elapse time 988.402367 ms. (  231.06 GFlops) 
Layer 4 :  Elapse time 419.812679 ms. (  262.20 GFlops) 
Layer 5 :  Elapse time 801.232020 ms. (  274.77 GFlops) 
Layer 6 :  Elapse time 801.985264 ms. (  274.51 GFlops) 
Layer 7 :  Elapse time 801.639001 ms. (  274.63 GFlops) 
Layer 8 :  Elapse time 360.366662 ms. (  283.25 GFlops) 
Layer 9 :  Elapse time 634.996017 ms. (  321.49 GFlops) 
Layer 10:  Elapse time 633.317312 ms. (  322.34 GFlops) 
Layer 11:  Elapse time 633.007367 ms. (  322.50 GFlops) 
Layer 12:  Elapse time 125.181278 ms. (  347.39 GFlops) 
Layer 13:  Elapse time 123.430332 ms. (  352.32 GFlops) 
Layer 14:  Elapse time 123.615662 ms. (  351.79 GFlops) 
Layer 15:  Elapse time 123.165687 ms. (  353.07 GFlops) 
Total elapse time: 9.589126. (  234.12 GFlops) 
Elapsed Time: 29.300s
    Clockticks: 839,350,000,000
    Instructions Retired: 1,480,830,000,000
    CPI Rate: 0.567
    Retiring: 100.0% of Pipeline Slots
     | A high fraction of pipeline slots was utilized by useful work. While the
     | goal is to make this metric value as big as possible, a high Retiring
     | value for non-vectorized code could prompt you to consider code
     | vectorization. Vectorization enables doing more computations without
     | significantly increasing the number of instructions, thus improving the
     | performance. Note that this metric value may be highlighted due to
     | Microcode Sequencer (MS) issue, so the performance can be improved by
     | avoiding using the MS.
     |
        Light Operations: 100.0% of Pipeline Slots
         | CPU retired light-weight operations (ones which require no more than
         | one uop) in a significant fraction of cycles. This correlates with
         | total number of instructions used by the program. Optimum value of
         | uops-per-instruction ratio is 1. While this is the most desirable
         | metric, high values can also provide opportunities for performance
         | optimizations.
         |
            FP Arithmetic: 0.0% of uOps
                FP x87: 0.0% of uOps
                FP Scalar: 0.0% of uOps
                FP Vector: 0.0% of uOps
                    128-bit FP Vector: 0.0% of uOps
                    256-bit FP Vector: 17.3% of uOps
                    512-bit FP Vector: 0.0% of uOps
            Memory Operations: 100.0% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | memory operations - uops for memory load or store accesses.
             |
            Branch Instructions: 100.0% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | branch instructions.
             |
            Nop Instructions: 51.2% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | NOP (no op) instructions. Compilers often use NOPs for certain
             | address alignments - e.g. start address of a function or loop
             | body.
             |
            Other: 100.0% of Pipeline Slots
             | This metric represents a non-floating-point (FP) uop fraction the
             | CPU has executed. If your application has no FP operations, this
             | is likely to be the biggest fraction.
             |
        Heavy Operations: 100.0% of Pipeline Slots
         | CPU retired heavy-weight operations (instructions that required 2+
         | uops) in a significant fraction of cycles.
         |
            Few Uops Instructions: 100.0% of Pipeline Slots
             | This metric represents fraction of slots where the CPU was
             | retiring instructions that that are decoder into two or up to
             | ([SNB+] four; [ADL+] five) uops. This highly-correlates with the
             | number of uops in such instructions.
             |
            Microcode Sequencer: 45.9% of Pipeline Slots
             | Issue: A significant fraction of cycles was spent retiring uOps
             | fetched by the Microcode Sequencer.
             | 
             | Tips:
             | 
             | 1. Make sure the /arch compiler flags are correct.
             | 
             | 2. Check the child Assists metric and, if it is highlighted as an
             | issue, follow the provided recommendations.
             | 
             | Note that this metric value may be highlighted due to MS Switches
             | issue.
             |
                Assists: 0.0% of Pipeline Slots
                CISC: 45.9% of Pipeline Slots
                 | For a significant fraction of cycles the CPU retired uops
                 | originated from CISC (complex instruction set computer)
                 | instruction. A CISC instruction has multiple uops that are
                 | required to perform the instruction's functionality as in the
                 | case of read-modify-write as an example. Since these
                 | instructions require mutiple uops they may or may not imply
                 | sub-optimal use of machine resources.
                 |
    Front-End Bound: 100.0% of Pipeline Slots
     | Issue: A significant portion of Pipeline Slots is remaining empty due to
     | issues in the Front-End.
     | 
     | Tips:  Make sure the code working size is not too large, the code layout
     | does not require too many memory accesses per cycle to get enough
     | instructions for filling four pipeline slots, or check for microcode
     | assists.
     |
        Front-End Latency: 100.0% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end latency issues, such as instruction-cache
         | misses, ITLB misses or fetch stalls after a branch misprediction. In
         | such cases, the front-end delivers no uOps.
         |
            ICache Misses: 0.0% of Clockticks
            ITLB Overhead: 0.0% of Clockticks
            Branch Resteers: 0.5% of Clockticks
                Mispredicts Resteers: 0.5% of Clockticks
                Clears Resteers: 0.0% of Clockticks
                Unknown Branches: 0.0% of Clockticks
            DSB Switches: 0.5% of Clockticks
             | Issue: A significant portion of cycles is spent switching from
             | the DSB to the MITE.  This may happen if a hot code region is too
             | large to fit into the DSB.
             | 
             | Tips: Consider changing code layout (for example, via profile-
             | guided optimization) to help your hot regions fit into the DSB.
             | 
             | See the "Optimization for Decoded ICache" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            Length Changing Prefixes: 0.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Length
             | Changing Prefixes (LCPs).
             | 
             | Tips: To avoid this issue, use proper compiler flags. Intel
             | Compiler enables these flags by default.
             | 
             | See the "Length-Changing Prefixes (LCP)" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            MS Switches: 1.5% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to
             | switches of uOp delivery to the Microcode Sequencer (MS).
             | Commonly used instructions are optimized for delivery by the DSB
             | or MITE pipelines. Certain operations cannot be handled natively
             | by the execution pipeline, and must be performed by microcode
             | (small programs injected into the execution stream). Switching to
             | the MS too often can negatively impact performance. The MS is
             | designated to deliver long uOp flows required by CISC
             | instructions like CPUID, or uncommon conditions like Floating
             | Point Assists when dealing with Denormals. Note that this metric
             | value may be highlighted due to Microcode Sequencer issue.
             |
        Front-End Bandwidth: 100.0% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end bandwidth issues, such as inefficiencies in
         | the instruction decoders or code restrictions for caching in the DSB
         | (decoded uOps cache). In such cases, the front-end typically delivers
         | a non-optimal amount of uOps to the back-end.
         |
            Front-End Bandwidth MITE: 1.5% of Pipeline Slots
                Decoder-0 Alone: 0.1% of Pipeline Slots
                %MITE_4wide: 0.4% of Clockticks
            Front-End Bandwidth DSB: 12.9% of Pipeline Slots
            (Info) DSB Coverage: 77.9%
            (Info) DSB Misses: 100.0% of Pipeline Slots
             | %DSB_MissesIssueTextAll
             |
    Bad Speculation: 0.0% of Pipeline Slots
        Branch Mispredict: 0.0% of Pipeline Slots
        Machine Clears: 0.0% of Pipeline Slots
    Back-End Bound: 100.0% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 100.0% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 10.5% of Clockticks
             | This metric shows how often machine was stalled without missing
             | the L1 data cache. The L1 cache typically has the shortest
             | latency. However, in certain cases like loads blocked on older
             | stores, a load might suffer a high latency even though it is
             | being satisfied by the L1. Note that this metric value may be
             | highlighted due to DTLB Overhead or Cycles of 1 Port Utilized
             | issues.
             |
                DTLB Overhead: 100.0% of Clockticks
                 | Issue: A significant portion of cycles is being spent
                 | handling first-level data TLB misses.
                 | 
                 | Tips:
                 | 
                 | 1.  As with ordinary data caching, focus on improving data
                 | locality and reducing the working-set size to minimize the
                 | DTLB overhead.
                 | 
                 | 2. Consider using profile-guided optimization (PGO) to
                 | collocate frequently-used data on the same page.
                 | 
                 | 3. Try using larger page sizes for large amounts of
                 | frequently-used data.
                 |
                    Load STLB Hit: 100.0% of Clockticks
                     | In significant fraction of cycles the (first level) DTLB
                     | was missed by load accesses, that later on hit in second-
                     | level TLB (STLB).
                     |
                    Load STLB Miss: 0.7% of Clockticks
                Loads Blocked by Store Forwarding: 0.3% of Clockticks
                Lock Latency: 0.1% of Clockticks
                 | A significant fraction of CPU cycles spent handling cache
                 | misses due to lock operations. Due to the microarchitecture
                 | handling of locks, they are classified as L1 Bound regardless
                 | of what memory source satisfied them. Note that this metric
                 | value may be highlighted due to Store Latency issue.
                 |
                Split Loads: 8.8% of Clockticks
                4K Aliasing: 39.1% of Clockticks
                 | Issue: A significant proportion of cycles is spent dealing
                 | with false 4k aliasing between loads and stores.
                 | 
                 | Tips: Use the source/assembly view to identify the aliasing
                 | loads and stores, and then adjust your data layout so that
                 | the loads and stores no longer alias.
                 | 
                 |  See the Intel 64 and IA-32 Architectures Optimization
                 | Reference Manual for more details.
                 |
                FB Full: 2.0% of Clockticks
                 | This metric does a rough estimation of how often L1D Fill
                 | Buffer unavailability limited additional L1D miss memory
                 | access requests to proceed. The higher the metric value, the
                 | deeper the memory hierarchy level the misses are satisfied
                 | from. Often it hints on approaching bandwidth limits (to L2
                 | cache, L3 cache or external memory). Avoid adding software
                 | prefetches if indeed memory BW limited.
                 |
            L2 Bound: 9.0% of Clockticks
             | This metric shows how often machine was stalled on L2 cache.
             | Avoiding cache misses (L1 misses/L2 hits) will improve the
             | latency and increase performance.
             |
            L3 Bound: 1.8% of Clockticks
                Contested Accesses: 0.0% of Clockticks
                Data Sharing: 1.3% of Clockticks
                L3 Latency: 1.7% of Clockticks
                SQ Full: 3.7% of Clockticks
            DRAM Bound: 2.7% of Clockticks
                Memory Bandwidth: 5.4% of Clockticks
                Memory Latency: 11.3% of Clockticks
                    Local Memory: 7.0% of Clockticks
                    Remote Memory: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 10.7% of Clockticks
                Store Latency: 39.7% of Clockticks
                False Sharing: 0.0% of Clockticks
                Split Stores: 0.1%
                Streaming Stores: 0.0% of Clockticks
                DTLB Store Overhead: 22.1% of Clockticks
                    Store STLB Hit: 20.9% of Clockticks
                    Store STLB Miss: 1.2% of Clockticks
        Core Bound: 100.0% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
            Divider: 12.1% of Clockticks
            Port Utilization: 100.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Core
             | non-divider-related issues.
             | 
             | Tips: Use vectorization to reduce pressure on the execution ports
             | as multiple elements are calculated with same uOp.
             |
                Cycles of 0 Ports Utilized: 0.3% of Clockticks
                    Serializing Operations: 4.1% of Clockticks
                        Slow Pause: 0.0% of Clockticks
                    Mixing Vectors: 0.0% of Clockticks
                Cycles of 1 Port Utilized: 19.4% of Clockticks
                 | This metric represents cycles fraction where the CPU executed
                 | total of 1 uop per cycle on all execution ports (Logical
                 | Processor cycles since ICL, Physical Core cycles otherwise).
                 | This can be due to heavy data-dependency among software
                 | instructions, or oversubscribing a particular hardware
                 | resource. In some other cases with high 1_Port_Utilized and
                 | L1 Bound, this metric can point to L1 data-cache latency
                 | bottleneck that may not necessarily manifest with complete
                 | execution starvation (due to the short L1 latency e.g.
                 | walking a linked list) - looking at the assembly can be
                 | helpful. Note that this metric value may be highlighted due
                 | to L1 Bound issue.
                 |
                Cycles of 2 Ports Utilized: 24.8% of Clockticks
                 | This metric represents cycles fraction CPU executed total of
                 | 2 uops per cycle on all execution ports (Logical Processor
                 | cycles since ICL, Physical Core cycles otherwise). Tip: Loop
                 | Vectorization - most compilers feature auto-Vectorization
                 | options today- reduces pressure on the execution ports as
                 | multiple elements are calculated with same uop.
                 |
                Cycles of 3+ Ports Utilized: 45.4% of Clockticks
                    ALU Operation Utilization: 55.8% of Clockticks
                        Port 0: 50.5% of Clockticks
                        Port 1: 55.2% of Clockticks
                        Port 5: 43.3% of Clockticks
                        Port 6: 74.1% of Clockticks
                    Load Operation Utilization: 44.1% of Clockticks
                    Store Operation Utilization: 6.1% of Clockticks
    Average CPU Frequency: 3.911 GHz
    Total Thread Count: 65
    Paused Time: 0s
Effective CPU Utilization: 11.4%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 7.324 out of 64
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 103.1 MB 
    Collection start time: 12:55:03 25/03/2025 UTC
    Collection stop time: 12:55:32 25/03/2025 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: uarch-exploration
结果保存在: vtune_results/v0.3.3-vgg16/uarch-exploration_vgg16_20250325_205236



===============================================
 所有分析完成！
 结束时间: Tue Mar 25 08:55:43 PM CST 2025
 结果位置: vtune_results/v0.3.3-vgg16
===============================================
创建了索引文件: vtune_results/v0.3.3-vgg16/index.html
正在启动 VTune 后端服务，端口: 8080...
VTune 后端服务已启动，PID: 1750567
可通过浏览器访问: http://hepnode1:8080
后端服务将持续运行12小时，之后自动停止
VTune 分析完成。可使用以下命令停止后端服务:
kill $(cat vtune_results/v0.3.3-vgg16/backend_pid.txt)
