使用版本: v0.3.2.6
使用大测试集 (VGG16)
VTune 版本信息：
Intel(R) VTune(TM) Profiler 2024.0.1 (build 627177) Command Line Tool
Copyright (C) 2009 Intel Corporation. All rights reserved.
===============================================
 VTune 分析报告 - 版本: v0.3.2.6 - 测试集: vgg16
 开始时间: Tue Mar 25 12:54:02 PM CST 2025
===============================================



--- 开始 hotspots 分析 Tue Mar 25 12:54:02 PM CST 2025 ---
收集数据中，请等待...
Elapsed Time: 24.753s

Top Hotspots
Function  Module  CPU Time  % of CPU Time(%)
--------  ------  --------  ----------------
Effective CPU Utilization: 9.8%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 6.281 out of 64
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-122-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.5 LTS"
    Computer Name: hepnode2
    Result Size: 4.2 MB 
    Collection start time: 04:54:05 25/03/2025 UTC
    Collection stop time: 04:54:30 25/03/2025 UTC
    Collector Type: Driverless Perf per-process counting,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
错误: hotspots 分析失败



--- 开始 memory-access 分析 Tue Mar 25 12:54:33 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 1193.045696 ms. (    9.14 GFlops) 
Layer 1 :  Elapse time 4184.587002 ms. (   55.57 GFlops) 
Layer 2 :  Elapse time 1327.693701 ms. (   86.01 GFlops) 
Layer 3 :  Elapse time 2235.771020 ms. (  102.15 GFlops) 
Layer 4 :  Elapse time 718.570630 ms. (  153.19 GFlops) 
Layer 5 :  Elapse time 1397.570372 ms. (  157.52 GFlops) 
Layer 6 :  Elapse time 1393.385649 ms. (  158.00 GFlops) 
Layer 7 :  Elapse time 1403.900385 ms. (  156.81 GFlops) 
Layer 8 :  Elapse time 510.364930 ms. (  200.00 GFlops) 
Layer 9 :  Elapse time 936.819315 ms. (  217.91 GFlops) 
Layer 10:  Elapse time 931.813320 ms. (  219.08 GFlops) 
Layer 11:  Elapse time 928.803364 ms. (  219.79 GFlops) 
Layer 12:  Elapse time 182.697058 ms. (  238.03 GFlops) 
Layer 13:  Elapse time 180.820704 ms. (  240.50 GFlops) 
Layer 14:  Elapse time 183.210293 ms. (  237.36 GFlops) 
Layer 15:  Elapse time 182.748318 ms. (  237.96 GFlops) 
Total elapse time: 17.891802. (  125.48 GFlops) 
Elapsed Time: 54.217s
    CPU Time: 303.216s
    Memory Bound: 100.0% of Pipeline Slots
     | The metric value is high. This may indicate that a significant fraction
     | of execution pipeline slots could be stalled due to demand memory load
     | and stores. Explore the metric breakdown by memory hierarchy, memory
     | bandwidth information, and correlation by memory objects.
     |
        L1 Bound: 13.2% of Clockticks
         | This metric shows how often machine was stalled without missing the
         | L1 data cache. The L1 cache typically has the shortest latency.
         | However, in certain cases like loads blocked on older stores, a load
         | might suffer a high latency even though it is being satisfied by the
         | L1.
         |
        L2 Bound: 4.7% of Clockticks
        L3 Bound: 2.0% of Clockticks
        DRAM Bound: 1.4% of Clockticks
            DRAM Bandwidth Bound: 0.2% of Elapsed Time
        Store Bound: 8.0% of Clockticks
        NUMA: % of Remote Accesses: 0.0%
        UPI Utilization Bound: 0.0% of Elapsed Time
    Loads: 214,450,704,666
    Stores: 37,097,546,996
    LLC Miss Count: 139,078,206
        Local DRAM Access Count: 96,156,879
        Remote DRAM Access Count: 0
        Remote Cache Access Count: 0
    Total Thread Count: 3,138
    Paused Time: 0s

Bandwidth Utilization
Bandwidth Domain                  Platform Maximum  Observed Maximum  Average  % of Elapsed Time with High BW Utilization(%)
--------------------------------  ----------------  ----------------  -------  ---------------------------------------------
DRAM, GB/sec                      180                         90.000    5.443                                           0.0%
DRAM Single-Package, GB/sec       90                          89.900    6.234                                           0.2%
UPI Utilization Single-link, (%)  100                          1.500    0.007                                           0.0%
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-122-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.5 LTS"
    Computer Name: hepnode2
    Result Size: 316.3 MB 
    Collection start time: 04:54:51 25/03/2025 UTC
    Collection stop time: 04:55:46 25/03/2025 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        Max DRAM Single-Package Bandwidth: 90.000 GB/s
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: memory-access
结果保存在: vtune_results/v0.3.2.6-vgg16/memory-access_vgg16_20250325_125402



--- 开始 threading 分析 Tue Mar 25 12:56:08 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 1314.092000 ms. (    8.30 GFlops) 
Layer 1 :  Elapse time 4276.959022 ms. (   54.37 GFlops) 
Layer 2 :  Elapse time 1462.756634 ms. (   78.06 GFlops) 
Layer 3 :  Elapse time 2368.315299 ms. (   96.43 GFlops) 
Layer 4 :  Elapse time 914.520661 ms. (  120.36 GFlops) 
Layer 5 :  Elapse time 1650.685390 ms. (  133.37 GFlops) 
Layer 6 :  Elapse time 1614.527305 ms. (  136.36 GFlops) 
Layer 7 :  Elapse time 1591.121674 ms. (  138.36 GFlops) 
Layer 8 :  Elapse time 674.911976 ms. (  151.24 GFlops) 
Layer 9 :  Elapse time 1126.333316 ms. (  181.25 GFlops) 
Layer 10:  Elapse time 1138.021628 ms. (  179.39 GFlops) 
Layer 11:  Elapse time 1080.189625 ms. (  188.99 GFlops) 
Layer 12:  Elapse time 324.046294 ms. (  134.20 GFlops) 
Layer 13:  Elapse time 311.759313 ms. (  139.49 GFlops) 
Layer 14:  Elapse time 302.375714 ms. (  143.82 GFlops) 
Layer 15:  Elapse time 354.279280 ms. (  122.75 GFlops) 
Total elapse time: 20.504895. (  109.49 GFlops) 
Elapsed Time: 62.519s
    Paused Time: 0s
Effective CPU Utilization: 9.2% (5.898 out of 64 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Total Thread Count: 3,137
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 5.998s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -----------------------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Thread Pool                                                                                                 5.997s                        100.0%       2,603
        Stream conf/vgg16.conf 0x4e2c394c                                                                           0.000s                        100.0%           1
        Stream /proc/self/status 0x3791b3a6                                                                         0.000s                        100.0%           1
        Stream /sys/devices/system/cpu/cpu0/topology/core_siblings_list 0x69712aff                                  0.000s                        100.0%           1
        Stream /sys/devices/system/cpu/cpu15/topology/thread_siblings_list 0x8b73d7cf                               0.000s                        100.0%           1
        [Others]                                                                                                    0.000s                        100.0%          21
    Spin and Overhead Time: 0s (0.0% of CPU Time)

        Top Functions with Spin or Overhead Time
        Function  Module  Spin and Overhead Time  (% from CPU Time)(%)
        --------  ------  ----------------------  --------------------
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-122-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.5 LTS"
    Computer Name: hepnode2
    Result Size: 17.9 MB 
    Collection start time: 04:56:11 25/03/2025 UTC
    Collection stop time: 04:57:14 25/03/2025 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: threading
结果保存在: vtune_results/v0.3.2.6-vgg16/threading_vgg16_20250325_125402



--- 开始 uarch-exploration 分析 Tue Mar 25 12:57:36 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 1183.078289 ms. (    9.21 GFlops) 
Layer 1 :  Elapse time 4176.547368 ms. (   55.68 GFlops) 
Layer 2 :  Elapse time 1324.913979 ms. (   86.19 GFlops) 
Layer 3 :  Elapse time 2244.431734 ms. (  101.75 GFlops) 
Layer 4 :  Elapse time 726.910988 ms. (  151.43 GFlops) 
Layer 5 :  Elapse time 1395.964702 ms. (  157.71 GFlops) 
Layer 6 :  Elapse time 1398.250977 ms. (  157.45 GFlops) 
Layer 7 :  Elapse time 1449.901660 ms. (  151.84 GFlops) 
Layer 8 :  Elapse time 510.406971 ms. (  199.98 GFlops) 
Layer 9 :  Elapse time 935.444673 ms. (  218.23 GFlops) 
Layer 10:  Elapse time 933.396657 ms. (  218.71 GFlops) 
Layer 11:  Elapse time 930.444002 ms. (  219.41 GFlops) 
Layer 12:  Elapse time 192.873001 ms. (  225.47 GFlops) 
Layer 13:  Elapse time 182.311694 ms. (  238.53 GFlops) 
Layer 14:  Elapse time 193.029324 ms. (  225.28 GFlops) 
Layer 15:  Elapse time 181.905667 ms. (  239.06 GFlops) 
Total elapse time: 17.959812. (  125.00 GFlops) 
Elapsed Time: 54.413s
    Clockticks: 951,150,000,000
    Instructions Retired: 1,456,140,000,000
    CPI Rate: 0.653
    Retiring: 100.0% of Pipeline Slots
     | A high fraction of pipeline slots was utilized by useful work. While the
     | goal is to make this metric value as big as possible, a high Retiring
     | value for non-vectorized code could prompt you to consider code
     | vectorization. Vectorization enables doing more computations without
     | significantly increasing the number of instructions, thus improving the
     | performance. Note that this metric value may be highlighted due to
     | Microcode Sequencer (MS) issue, so the performance can be improved by
     | avoiding using the MS.
     |
        Light Operations: 100.0% of Pipeline Slots
         | CPU retired light-weight operations (ones which require no more than
         | one uop) in a significant fraction of cycles. This correlates with
         | total number of instructions used by the program. Optimum value of
         | uops-per-instruction ratio is 1. While this is the most desirable
         | metric, high values can also provide opportunities for performance
         | optimizations.
         |
            FP Arithmetic: 0.0% of uOps
                FP x87: 0.0% of uOps
                FP Scalar: 0.0% of uOps
                FP Vector: 0.0% of uOps
                    128-bit FP Vector: 1.0% of uOps
                    256-bit FP Vector: 13.4% of uOps
                    512-bit FP Vector: 0.0% of uOps
            Memory Operations: 100.0% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | memory operations - uops for memory load or store accesses.
             |
            Branch Instructions: 100.0% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | branch instructions.
             |
            Nop Instructions: 8.7% of Pipeline Slots
            Other: 100.0% of Pipeline Slots
             | This metric represents a non-floating-point (FP) uop fraction the
             | CPU has executed. If your application has no FP operations, this
             | is likely to be the biggest fraction.
             |
        Heavy Operations: 73.5% of Pipeline Slots
         | CPU retired heavy-weight operations (instructions that required 2+
         | uops) in a significant fraction of cycles.
         |
            Few Uops Instructions: 50.2% of Pipeline Slots
             | This metric represents fraction of slots where the CPU was
             | retiring instructions that that are decoder into two or up to
             | ([SNB+] four; [ADL+] five) uops. This highly-correlates with the
             | number of uops in such instructions.
             |
            Microcode Sequencer: 23.3% of Pipeline Slots
             | Issue: A significant fraction of cycles was spent retiring uOps
             | fetched by the Microcode Sequencer.
             | 
             | Tips:
             | 
             | 1. Make sure the /arch compiler flags are correct.
             | 
             | 2. Check the child Assists metric and, if it is highlighted as an
             | issue, follow the provided recommendations.
             | 
             | Note that this metric value may be highlighted due to MS Switches
             | issue.
             |
                Assists: 0.0% of Pipeline Slots
                CISC: 23.3% of Pipeline Slots
                 | For a significant fraction of cycles the CPU retired uops
                 | originated from CISC (complex instruction set computer)
                 | instruction. A CISC instruction has multiple uops that are
                 | required to perform the instruction's functionality as in the
                 | case of read-modify-write as an example. Since these
                 | instructions require mutiple uops they may or may not imply
                 | sub-optimal use of machine resources.
                 |
    Front-End Bound: 100.0% of Pipeline Slots
     | Issue: A significant portion of Pipeline Slots is remaining empty due to
     | issues in the Front-End.
     | 
     | Tips:  Make sure the code working size is not too large, the code layout
     | does not require too many memory accesses per cycle to get enough
     | instructions for filling four pipeline slots, or check for microcode
     | assists.
     |
        Front-End Latency: 35.2% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end latency issues, such as instruction-cache
         | misses, ITLB misses or fetch stalls after a branch misprediction. In
         | such cases, the front-end delivers no uOps.
         |
            ICache Misses: 0.0% of Clockticks
            ITLB Overhead: 1.3% of Clockticks
            Branch Resteers: 0.4% of Clockticks
                Mispredicts Resteers: 0.3% of Clockticks
                Clears Resteers: 0.0% of Clockticks
                Unknown Branches: 0.0% of Clockticks
            DSB Switches: 0.5% of Clockticks
             | Issue: A significant portion of cycles is spent switching from
             | the DSB to the MITE.  This may happen if a hot code region is too
             | large to fit into the DSB.
             | 
             | Tips: Consider changing code layout (for example, via profile-
             | guided optimization) to help your hot regions fit into the DSB.
             | 
             | See the "Optimization for Decoded ICache" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            Length Changing Prefixes: 0.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Length
             | Changing Prefixes (LCPs).
             | 
             | Tips: To avoid this issue, use proper compiler flags. Intel
             | Compiler enables these flags by default.
             | 
             | See the "Length-Changing Prefixes (LCP)" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            MS Switches: 4.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to
             | switches of uOp delivery to the Microcode Sequencer (MS).
             | Commonly used instructions are optimized for delivery by the DSB
             | or MITE pipelines. Certain operations cannot be handled natively
             | by the execution pipeline, and must be performed by microcode
             | (small programs injected into the execution stream). Switching to
             | the MS too often can negatively impact performance. The MS is
             | designated to deliver long uOp flows required by CISC
             | instructions like CPUID, or uncommon conditions like Floating
             | Point Assists when dealing with Denormals. Note that this metric
             | value may be highlighted due to Microcode Sequencer issue.
             |
        Front-End Bandwidth: 82.5% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end bandwidth issues, such as inefficiencies in
         | the instruction decoders or code restrictions for caching in the DSB
         | (decoded uOps cache). In such cases, the front-end typically delivers
         | a non-optimal amount of uOps to the back-end.
         |
            Front-End Bandwidth MITE: 2.4% of Pipeline Slots
                Decoder-0 Alone: 0.5% of Pipeline Slots
                %MITE_4wide: 0.5% of Clockticks
            Front-End Bandwidth DSB: 12.6% of Pipeline Slots
            (Info) DSB Coverage: 80.9%
            (Info) DSB Misses: 100.0% of Pipeline Slots
             | %DSB_MissesIssueTextAll
             |
    Bad Speculation: 0.0% of Pipeline Slots
        Branch Mispredict: 0.0% of Pipeline Slots
        Machine Clears: 0.0% of Pipeline Slots
    Back-End Bound: 100.0% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 100.0% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 13.2% of Clockticks
             | This metric shows how often machine was stalled without missing
             | the L1 data cache. The L1 cache typically has the shortest
             | latency. However, in certain cases like loads blocked on older
             | stores, a load might suffer a high latency even though it is
             | being satisfied by the L1. Note that this metric value may be
             | highlighted due to DTLB Overhead or Cycles of 1 Port Utilized
             | issues.
             |
                DTLB Overhead: 100.0% of Clockticks
                 | Issue: A significant portion of cycles is being spent
                 | handling first-level data TLB misses.
                 | 
                 | Tips:
                 | 
                 | 1.  As with ordinary data caching, focus on improving data
                 | locality and reducing the working-set size to minimize the
                 | DTLB overhead.
                 | 
                 | 2. Consider using profile-guided optimization (PGO) to
                 | collocate frequently-used data on the same page.
                 | 
                 | 3. Try using larger page sizes for large amounts of
                 | frequently-used data.
                 |
                    Load STLB Hit: 100.0% of Clockticks
                     | In significant fraction of cycles the (first level) DTLB
                     | was missed by load accesses, that later on hit in second-
                     | level TLB (STLB).
                     |
                    Load STLB Miss: 0.3% of Clockticks
                Loads Blocked by Store Forwarding: 0.2% of Clockticks
                Lock Latency: 0.1% of Clockticks
                 | A significant fraction of CPU cycles spent handling cache
                 | misses due to lock operations. Due to the microarchitecture
                 | handling of locks, they are classified as L1 Bound regardless
                 | of what memory source satisfied them. Note that this metric
                 | value may be highlighted due to Store Latency issue.
                 |
                Split Loads: 9.7% of Clockticks
                4K Aliasing: 23.0% of Clockticks
                 | Issue: A significant proportion of cycles is spent dealing
                 | with false 4k aliasing between loads and stores.
                 | 
                 | Tips: Use the source/assembly view to identify the aliasing
                 | loads and stores, and then adjust your data layout so that
                 | the loads and stores no longer alias.
                 | 
                 |  See the Intel 64 and IA-32 Architectures Optimization
                 | Reference Manual for more details.
                 |
                FB Full: 1.4% of Clockticks
                 | This metric does a rough estimation of how often L1D Fill
                 | Buffer unavailability limited additional L1D miss memory
                 | access requests to proceed. The higher the metric value, the
                 | deeper the memory hierarchy level the misses are satisfied
                 | from. Often it hints on approaching bandwidth limits (to L2
                 | cache, L3 cache or external memory). Avoid adding software
                 | prefetches if indeed memory BW limited.
                 |
            L2 Bound: 6.1% of Clockticks
             | This metric shows how often machine was stalled on L2 cache.
             | Avoiding cache misses (L1 misses/L2 hits) will improve the
             | latency and increase performance.
             |
            L3 Bound: 2.0% of Clockticks
                Contested Accesses: 0.0% of Clockticks
                Data Sharing: 2.9% of Clockticks
                L3 Latency: 1.9% of Clockticks
                SQ Full: 2.2% of Clockticks
            DRAM Bound: 1.4% of Clockticks
                Memory Bandwidth: 2.8% of Clockticks
                Memory Latency: 7.9% of Clockticks
                    Local DRAM: 1.6% of Clockticks
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 8.7% of Clockticks
                Store Latency: 22.3% of Clockticks
                False Sharing: 2.8% of Clockticks
                Split Stores: 0.1%
                Streaming Stores: 0.0% of Clockticks
                DTLB Store Overhead: 20.7% of Clockticks
                    Store STLB Hit: 19.5% of Clockticks
                    Store STLB Miss: 1.3% of Clockticks
        Core Bound: 100.0% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
            Divider: 11.7% of Clockticks
            Port Utilization: 100.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Core
             | non-divider-related issues.
             | 
             | Tips: Use vectorization to reduce pressure on the execution ports
             | as multiple elements are calculated with same uOp.
             |
                Cycles of 0 Ports Utilized: 2.7% of Clockticks
                    Serializing Operations: 18.3% of Clockticks
                        Slow Pause: 8.3% of Clockticks
                    Mixing Vectors: 0.0% of Clockticks
                Cycles of 1 Port Utilized: 18.6% of Clockticks
                 | This metric represents cycles fraction where the CPU executed
                 | total of 1 uop per cycle on all execution ports (Logical
                 | Processor cycles since ICL, Physical Core cycles otherwise).
                 | This can be due to heavy data-dependency among software
                 | instructions, or oversubscribing a particular hardware
                 | resource. In some other cases with high 1_Port_Utilized and
                 | L1 Bound, this metric can point to L1 data-cache latency
                 | bottleneck that may not necessarily manifest with complete
                 | execution starvation (due to the short L1 latency e.g.
                 | walking a linked list) - looking at the assembly can be
                 | helpful. Note that this metric value may be highlighted due
                 | to L1 Bound issue.
                 |
                Cycles of 2 Ports Utilized: 19.7% of Clockticks
                 | This metric represents cycles fraction CPU executed total of
                 | 2 uops per cycle on all execution ports (Logical Processor
                 | cycles since ICL, Physical Core cycles otherwise). Tip: Loop
                 | Vectorization - most compilers feature auto-Vectorization
                 | options today- reduces pressure on the execution ports as
                 | multiple elements are calculated with same uop.
                 |
                Cycles of 3+ Ports Utilized: 37.0% of Clockticks
                    ALU Operation Utilization: 56.4% of Clockticks
                        Port 0: 45.5% of Clockticks
                        Port 1: 51.4% of Clockticks
                        Port 5: 47.9% of Clockticks
                        Port 6: 80.8% of Clockticks
                    Load Operation Utilization: 43.8% of Clockticks
                    Store Operation Utilization: 7.9% of Clockticks
    Average CPU Frequency: 3.239 GHz
    Total Thread Count: 3,138
    Paused Time: 0s
Effective CPU Utilization: 8.4%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 5.397 out of 64
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-122-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.5 LTS"
    Computer Name: hepnode2
    Result Size: 121.7 MB 
    Collection start time: 04:57:42 25/03/2025 UTC
    Collection stop time: 04:58:36 25/03/2025 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: uarch-exploration
结果保存在: vtune_results/v0.3.2.6-vgg16/uarch-exploration_vgg16_20250325_125402



===============================================
 所有分析完成！
 结束时间: Tue Mar 25 12:58:50 PM CST 2025
 结果位置: vtune_results/v0.3.2.6-vgg16
===============================================
创建了索引文件: vtune_results/v0.3.2.6-vgg16/index.html
正在启动 VTune 后端服务，端口: 8080...
VTune 后端服务已启动，PID: 2661425
可通过浏览器访问: http://hepnode2:8080
后端服务将持续运行12小时，之后自动停止
VTune 分析完成。可使用以下命令停止后端服务:
kill $(cat vtune_results/v0.3.2.6-vgg16/backend_pid.txt)
