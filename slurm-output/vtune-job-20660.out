使用版本: 0.3.3
使用大测试集 (VGG16)
VTune 版本信息：
Intel(R) VTune(TM) Profiler 2024.0.1 (build 627177) Command Line Tool
Copyright (C) 2009 Intel Corporation. All rights reserved.
===============================================
 VTune 分析报告 - 版本: 0.3.3 - 测试集: vgg16
 开始时间: Tue Mar 25 08:12:02 PM CST 2025
===============================================



--- 开始 hotspots 分析 Tue Mar 25 08:12:02 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 1002.245347 ms. (   10.88 GFlops) 
Layer 1 :  Elapse time 1766.073306 ms. (  131.68 GFlops) 
Layer 2 :  Elapse time 788.984617 ms. (  144.73 GFlops) 
Layer 3 :  Elapse time 1174.216350 ms. (  194.50 GFlops) 
Layer 4 :  Elapse time 637.744665 ms. (  172.60 GFlops) 
Layer 5 :  Elapse time 1100.795666 ms. (  199.99 GFlops) 
Layer 6 :  Elapse time 1062.139352 ms. (  207.27 GFlops) 
Layer 7 :  Elapse time 1028.753996 ms. (  214.00 GFlops) 
Layer 8 :  Elapse time 606.351614 ms. (  168.34 GFlops) 
Layer 9 :  Elapse time 810.381333 ms. (  251.91 GFlops) 
Layer 10:  Elapse time 794.919332 ms. (  256.81 GFlops) 
Layer 11:  Elapse time 847.537994 ms. (  240.87 GFlops) 
Layer 12:  Elapse time 239.419619 ms. (  181.63 GFlops) 
Layer 13:  Elapse time 241.360029 ms. (  180.17 GFlops) 
Layer 14:  Elapse time 222.711325 ms. (  195.26 GFlops) 
Layer 15:  Elapse time 204.440037 ms. (  212.71 GFlops) 
Total elapse time: 12.528075. (  179.20 GFlops) 
Elapsed Time: 38.636s
    CPU Time: 332.160s
        Effective Time: 332.160s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 3,136
    Paused Time: 0s

Top Hotspots
Function                          Module    CPU Time  % of CPU Time(%)
--------------------------------  --------  --------  ----------------
sgemm                             winograd  147.227s             44.3%
output_transform._omp_fn.0        winograd   49.120s             14.8%
image_transform._omp_fn.0         winograd   48.296s             14.5%
output_unpacking_store._omp_fn.0  winograd   30.040s              9.0%
image_packing._omp_fn.0           winograd   27.355s              8.2%
[Others]                          N/A        30.122s              9.1%
Effective CPU Utilization: 15.3%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 9.798 out of 64
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 15.4 MB 
    Collection start time: 12:12:05 25/03/2025 UTC
    Collection stop time: 12:12:44 25/03/2025 UTC
    Collector Type: Driverless Perf per-process counting,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: hotspots
结果保存在: vtune_results/0.3.3-vgg16/hotspots_vgg16_20250325_201202



--- 开始 memory-access 分析 Tue Mar 25 08:13:08 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 770.156622 ms. (   14.15 GFlops) 
Layer 1 :  Elapse time 1623.276313 ms. (  143.26 GFlops) 
Layer 2 :  Elapse time 653.661648 ms. (  174.69 GFlops) 
Layer 3 :  Elapse time 990.442673 ms. (  230.58 GFlops) 
Layer 4 :  Elapse time 415.579001 ms. (  264.87 GFlops) 
Layer 5 :  Elapse time 807.664633 ms. (  272.58 GFlops) 
Layer 6 :  Elapse time 801.088015 ms. (  274.81 GFlops) 
Layer 7 :  Elapse time 801.051617 ms. (  274.83 GFlops) 
Layer 8 :  Elapse time 358.097315 ms. (  285.04 GFlops) 
Layer 9 :  Elapse time 633.952300 ms. (  322.02 GFlops) 
Layer 10:  Elapse time 640.655359 ms. (  318.65 GFlops) 
Layer 11:  Elapse time 634.125948 ms. (  321.93 GFlops) 
Layer 12:  Elapse time 127.367973 ms. (  341.42 GFlops) 
Layer 13:  Elapse time 134.004990 ms. (  324.51 GFlops) 
Layer 14:  Elapse time 135.252317 ms. (  321.52 GFlops) 
Layer 15:  Elapse time 128.391981 ms. (  338.70 GFlops) 
Total elapse time: 9.654769. (  232.53 GFlops) 
Elapsed Time: 29.504s
    CPU Time: 246.347s
    Memory Bound: 100.0% of Pipeline Slots
     | The metric value is high. This may indicate that a significant fraction
     | of execution pipeline slots could be stalled due to demand memory load
     | and stores. Explore the metric breakdown by memory hierarchy, memory
     | bandwidth information, and correlation by memory objects.
     |
        L1 Bound: 13.7% of Clockticks
         | This metric shows how often machine was stalled without missing the
         | L1 data cache. The L1 cache typically has the shortest latency.
         | However, in certain cases like loads blocked on older stores, a load
         | might suffer a high latency even though it is being satisfied by the
         | L1.
         |
        L2 Bound: 5.2% of Clockticks
         | This metric shows how often machine was stalled on L2 cache. Avoiding
         | cache misses (L1 misses/L2 hits) will improve the latency and
         | increase performance.
         |
        L3 Bound: 1.2% of Clockticks
        DRAM Bound: 2.2% of Clockticks
            DRAM Bandwidth Bound: 1.7% of Elapsed Time
        Store Bound: 16.3% of Clockticks
        NUMA: % of Remote Accesses: 0.0%
        UPI Utilization Bound: 0.0% of Elapsed Time
    Loads: 204,351,448,022
    Stores: 38,276,264,045
    LLC Miss Count: 118,925,443
        Local DRAM Access Count: 106,367,137
        Remote DRAM Access Count: 0
        Remote Cache Access Count: 0
    Total Thread Count: 3,138
    Paused Time: 0s

Bandwidth Utilization
Bandwidth Domain                  Platform Maximum  Observed Maximum  Average  % of Elapsed Time with High BW Utilization(%)
--------------------------------  ----------------  ----------------  -------  ---------------------------------------------
DRAM, GB/sec                      178                        265.600   14.791                                           0.8%
DRAM Single-Package, GB/sec       133                        265.400   15.261                                           1.7%
UPI Utilization Single-link, (%)  100                          2.100    0.024                                           0.0%
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 246.2 MB 
    Collection start time: 12:13:26 25/03/2025 UTC
    Collection stop time: 12:13:56 25/03/2025 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        Max DRAM Single-Package Bandwidth: 133.000 GB/s
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: memory-access
结果保存在: vtune_results/0.3.3-vgg16/memory-access_vgg16_20250325_201202



--- 开始 threading 分析 Tue Mar 25 08:14:14 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 919.691006 ms. (   11.85 GFlops) 
Layer 1 :  Elapse time 1762.691736 ms. (  131.93 GFlops) 
Layer 2 :  Elapse time 796.560367 ms. (  143.35 GFlops) 
Layer 3 :  Elapse time 1122.129361 ms. (  203.52 GFlops) 
Layer 4 :  Elapse time 600.740671 ms. (  183.23 GFlops) 
Layer 5 :  Elapse time 1035.988331 ms. (  212.50 GFlops) 
Layer 6 :  Elapse time 987.788677 ms. (  222.87 GFlops) 
Layer 7 :  Elapse time 979.526043 ms. (  224.75 GFlops) 
Layer 8 :  Elapse time 536.499341 ms. (  190.26 GFlops) 
Layer 9 :  Elapse time 813.489676 ms. (  250.95 GFlops) 
Layer 10:  Elapse time 858.693679 ms. (  237.74 GFlops) 
Layer 11:  Elapse time 811.023712 ms. (  251.71 GFlops) 
Layer 12:  Elapse time 250.996351 ms. (  173.26 GFlops) 
Layer 13:  Elapse time 234.041055 ms. (  185.81 GFlops) 
Layer 14:  Elapse time 198.601325 ms. (  218.96 GFlops) 
Layer 15:  Elapse time 216.936350 ms. (  200.46 GFlops) 
Total elapse time: 12.125398. (  185.15 GFlops) 
Elapsed Time: 37.415s
    Paused Time: 0s
Effective CPU Utilization: 13.6% (8.704 out of 64 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Total Thread Count: 3,137
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 8.400s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                                   Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        ----------------------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Thread Pool                                                                                                8.400s                        100.0%       2,570
        Stream conf/vgg16.conf 0x4e2c38dc                                                                          0.000s                        100.0%           1
        Stream /proc/self/status 0x3791b3a6                                                                        0.000s                        100.0%           1
        Stream /sys/devices/system/cpu/cpu0/topology/core_siblings_list 0x69712aff                                 0.000s                        100.0%           1
        Stream /sys/devices/system/cpu/cpu1/topology/thread_siblings_list 0x8b73d7cf                               0.000s                        100.0%           1
        [Others]                                                                                                   0.000s                        100.0%          21
    Spin and Overhead Time: 0s (0.0% of CPU Time)

        Top Functions with Spin or Overhead Time
        Function  Module  Spin and Overhead Time  (% from CPU Time)(%)
        --------  ------  ----------------------  --------------------
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 17.7 MB 
    Collection start time: 12:14:17 25/03/2025 UTC
    Collection stop time: 12:14:54 25/03/2025 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: threading
结果保存在: vtune_results/0.3.3-vgg16/threading_vgg16_20250325_201202



--- 开始 uarch-exploration 分析 Tue Mar 25 08:15:18 PM CST 2025 ---
收集数据中，请等待...
Layer 0 :  Elapse time 763.453722 ms. (   14.28 GFlops) 
Layer 1 :  Elapse time 1617.097616 ms. (  143.81 GFlops) 
Layer 2 :  Elapse time 660.324335 ms. (  172.93 GFlops) 
Layer 3 :  Elapse time 987.681309 ms. (  231.23 GFlops) 
Layer 4 :  Elapse time 417.276303 ms. (  263.79 GFlops) 
Layer 5 :  Elapse time 808.918715 ms. (  272.15 GFlops) 
Layer 6 :  Elapse time 802.180290 ms. (  274.44 GFlops) 
Layer 7 :  Elapse time 801.898718 ms. (  274.54 GFlops) 
Layer 8 :  Elapse time 358.405670 ms. (  284.80 GFlops) 
Layer 9 :  Elapse time 632.494688 ms. (  322.76 GFlops) 
Layer 10:  Elapse time 636.021932 ms. (  320.97 GFlops) 
Layer 11:  Elapse time 632.758061 ms. (  322.63 GFlops) 
Layer 12:  Elapse time 126.302322 ms. (  344.31 GFlops) 
Layer 13:  Elapse time 125.670671 ms. (  346.04 GFlops) 
Layer 14:  Elapse time 125.313282 ms. (  347.02 GFlops) 
Layer 15:  Elapse time 125.650644 ms. (  346.09 GFlops) 
Total elapse time: 9.621448. (  233.33 GFlops) 
Elapsed Time: 29.399s
    Clockticks: 847,090,000,000
    Instructions Retired: 1,477,040,000,000
    CPI Rate: 0.574
    Retiring: 100.0% of Pipeline Slots
     | A high fraction of pipeline slots was utilized by useful work. While the
     | goal is to make this metric value as big as possible, a high Retiring
     | value for non-vectorized code could prompt you to consider code
     | vectorization. Vectorization enables doing more computations without
     | significantly increasing the number of instructions, thus improving the
     | performance. Note that this metric value may be highlighted due to
     | Microcode Sequencer (MS) issue, so the performance can be improved by
     | avoiding using the MS.
     |
        Light Operations: 100.0% of Pipeline Slots
         | CPU retired light-weight operations (ones which require no more than
         | one uop) in a significant fraction of cycles. This correlates with
         | total number of instructions used by the program. Optimum value of
         | uops-per-instruction ratio is 1. While this is the most desirable
         | metric, high values can also provide opportunities for performance
         | optimizations.
         |
            FP Arithmetic: 0.0% of uOps
                FP x87: 0.0% of uOps
                FP Scalar: 0.0% of uOps
                FP Vector: 0.0% of uOps
                    128-bit FP Vector: 1.0% of uOps
                    256-bit FP Vector: 17.0% of uOps
                    512-bit FP Vector: 0.0% of uOps
            Memory Operations: 100.0% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | memory operations - uops for memory load or store accesses.
             |
            Branch Instructions: 100.0% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | branch instructions.
             |
            Nop Instructions: 36.4% of Pipeline Slots
             | For a significant fraction of pipeline slots the CPU was retiring
             | NOP (no op) instructions. Compilers often use NOPs for certain
             | address alignments - e.g. start address of a function or loop
             | body.
             |
            Other: 100.0% of Pipeline Slots
             | This metric represents a non-floating-point (FP) uop fraction the
             | CPU has executed. If your application has no FP operations, this
             | is likely to be the biggest fraction.
             |
        Heavy Operations: 100.0% of Pipeline Slots
         | CPU retired heavy-weight operations (instructions that required 2+
         | uops) in a significant fraction of cycles.
         |
            Few Uops Instructions: 100.0% of Pipeline Slots
             | This metric represents fraction of slots where the CPU was
             | retiring instructions that that are decoder into two or up to
             | ([SNB+] four; [ADL+] five) uops. This highly-correlates with the
             | number of uops in such instructions.
             |
            Microcode Sequencer: 33.7% of Pipeline Slots
             | Issue: A significant fraction of cycles was spent retiring uOps
             | fetched by the Microcode Sequencer.
             | 
             | Tips:
             | 
             | 1. Make sure the /arch compiler flags are correct.
             | 
             | 2. Check the child Assists metric and, if it is highlighted as an
             | issue, follow the provided recommendations.
             | 
             | Note that this metric value may be highlighted due to MS Switches
             | issue.
             |
                Assists: 0.0% of Pipeline Slots
                CISC: 33.7% of Pipeline Slots
                 | For a significant fraction of cycles the CPU retired uops
                 | originated from CISC (complex instruction set computer)
                 | instruction. A CISC instruction has multiple uops that are
                 | required to perform the instruction's functionality as in the
                 | case of read-modify-write as an example. Since these
                 | instructions require mutiple uops they may or may not imply
                 | sub-optimal use of machine resources.
                 |
    Front-End Bound: 100.0% of Pipeline Slots
     | Issue: A significant portion of Pipeline Slots is remaining empty due to
     | issues in the Front-End.
     | 
     | Tips:  Make sure the code working size is not too large, the code layout
     | does not require too many memory accesses per cycle to get enough
     | instructions for filling four pipeline slots, or check for microcode
     | assists.
     |
        Front-End Latency: 100.0% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end latency issues, such as instruction-cache
         | misses, ITLB misses or fetch stalls after a branch misprediction. In
         | such cases, the front-end delivers no uOps.
         |
            ICache Misses: 0.0% of Clockticks
            ITLB Overhead: 0.0% of Clockticks
            Branch Resteers: 0.5% of Clockticks
                Mispredicts Resteers: 0.5% of Clockticks
                Clears Resteers: 0.0% of Clockticks
                Unknown Branches: 0.0% of Clockticks
            DSB Switches: 0.1% of Clockticks
             | Issue: A significant portion of cycles is spent switching from
             | the DSB to the MITE.  This may happen if a hot code region is too
             | large to fit into the DSB.
             | 
             | Tips: Consider changing code layout (for example, via profile-
             | guided optimization) to help your hot regions fit into the DSB.
             | 
             | See the "Optimization for Decoded ICache" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            Length Changing Prefixes: 0.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Length
             | Changing Prefixes (LCPs).
             | 
             | Tips: To avoid this issue, use proper compiler flags. Intel
             | Compiler enables these flags by default.
             | 
             | See the "Length-Changing Prefixes (LCP)" section in the Intel 64
             | and IA-32 Architectures Optimization Reference Manual.
             |
            MS Switches: 1.3% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to
             | switches of uOp delivery to the Microcode Sequencer (MS).
             | Commonly used instructions are optimized for delivery by the DSB
             | or MITE pipelines. Certain operations cannot be handled natively
             | by the execution pipeline, and must be performed by microcode
             | (small programs injected into the execution stream). Switching to
             | the MS too often can negatively impact performance. The MS is
             | designated to deliver long uOp flows required by CISC
             | instructions like CPUID, or uncommon conditions like Floating
             | Point Assists when dealing with Denormals. Note that this metric
             | value may be highlighted due to Microcode Sequencer issue.
             |
        Front-End Bandwidth: 100.0% of Pipeline Slots
         | This metric represents a fraction of slots during which CPU was
         | stalled due to front-end bandwidth issues, such as inefficiencies in
         | the instruction decoders or code restrictions for caching in the DSB
         | (decoded uOps cache). In such cases, the front-end typically delivers
         | a non-optimal amount of uOps to the back-end.
         |
            Front-End Bandwidth MITE: 2.0% of Pipeline Slots
                Decoder-0 Alone: 0.9% of Pipeline Slots
                %MITE_4wide: 0.1% of Clockticks
            Front-End Bandwidth DSB: 17.0% of Pipeline Slots
             | This metric represents a fraction of cycles during which CPU was
             | likely limited due to DSB (decoded uop cache) fetch pipeline. For
             | example, inefficient utilization of the DSB cache structure or
             | bank conflict when reading from it, are categorized here.
             |
            (Info) DSB Coverage: 74.0%
            (Info) DSB Misses: 100.0% of Pipeline Slots
             | %DSB_MissesIssueTextAll
             |
    Bad Speculation: 0.0% of Pipeline Slots
        Branch Mispredict: 0.0% of Pipeline Slots
        Machine Clears: 0.0% of Pipeline Slots
    Back-End Bound: 100.0% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 100.0% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 9.8% of Clockticks
             | This metric shows how often machine was stalled without missing
             | the L1 data cache. The L1 cache typically has the shortest
             | latency. However, in certain cases like loads blocked on older
             | stores, a load might suffer a high latency even though it is
             | being satisfied by the L1. Note that this metric value may be
             | highlighted due to DTLB Overhead or Cycles of 1 Port Utilized
             | issues.
             |
                DTLB Overhead: 100.0% of Clockticks
                 | Issue: A significant portion of cycles is being spent
                 | handling first-level data TLB misses.
                 | 
                 | Tips:
                 | 
                 | 1.  As with ordinary data caching, focus on improving data
                 | locality and reducing the working-set size to minimize the
                 | DTLB overhead.
                 | 
                 | 2. Consider using profile-guided optimization (PGO) to
                 | collocate frequently-used data on the same page.
                 | 
                 | 3. Try using larger page sizes for large amounts of
                 | frequently-used data.
                 |
                    Load STLB Hit: 100.0% of Clockticks
                     | In significant fraction of cycles the (first level) DTLB
                     | was missed by load accesses, that later on hit in second-
                     | level TLB (STLB).
                     |
                    Load STLB Miss: 0.7% of Clockticks
                Loads Blocked by Store Forwarding: 0.2% of Clockticks
                Lock Latency: 0.1% of Clockticks
                 | A significant fraction of CPU cycles spent handling cache
                 | misses due to lock operations. Due to the microarchitecture
                 | handling of locks, they are classified as L1 Bound regardless
                 | of what memory source satisfied them. Note that this metric
                 | value may be highlighted due to Store Latency issue.
                 |
                Split Loads: 7.9% of Clockticks
                4K Aliasing: 28.9% of Clockticks
                 | Issue: A significant proportion of cycles is spent dealing
                 | with false 4k aliasing between loads and stores.
                 | 
                 | Tips: Use the source/assembly view to identify the aliasing
                 | loads and stores, and then adjust your data layout so that
                 | the loads and stores no longer alias.
                 | 
                 |  See the Intel 64 and IA-32 Architectures Optimization
                 | Reference Manual for more details.
                 |
                FB Full: 1.8% of Clockticks
                 | This metric does a rough estimation of how often L1D Fill
                 | Buffer unavailability limited additional L1D miss memory
                 | access requests to proceed. The higher the metric value, the
                 | deeper the memory hierarchy level the misses are satisfied
                 | from. Often it hints on approaching bandwidth limits (to L2
                 | cache, L3 cache or external memory). Avoid adding software
                 | prefetches if indeed memory BW limited.
                 |
            L2 Bound: 7.0% of Clockticks
             | This metric shows how often machine was stalled on L2 cache.
             | Avoiding cache misses (L1 misses/L2 hits) will improve the
             | latency and increase performance.
             |
            L3 Bound: 1.6% of Clockticks
                Contested Accesses: 0.0% of Clockticks
                Data Sharing: 0.8% of Clockticks
                L3 Latency: 1.4% of Clockticks
                SQ Full: 4.0% of Clockticks
            DRAM Bound: 2.4% of Clockticks
                Memory Bandwidth: 4.4% of Clockticks
                Memory Latency: 10.7% of Clockticks
                    Local DRAM: 5.1% of Clockticks
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 10.9% of Clockticks
                Store Latency: 44.0% of Clockticks
                False Sharing: 0.3% of Clockticks
                Split Stores: 0.1%
                Streaming Stores: 0.0% of Clockticks
                DTLB Store Overhead: 36.3% of Clockticks
                    Store STLB Hit: 34.6% of Clockticks
                    Store STLB Miss: 1.7% of Clockticks
        Core Bound: 100.0% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
            Divider: 11.8% of Clockticks
            Port Utilization: 100.0% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Core
             | non-divider-related issues.
             | 
             | Tips: Use vectorization to reduce pressure on the execution ports
             | as multiple elements are calculated with same uOp.
             |
                Cycles of 0 Ports Utilized: 0.2% of Clockticks
                    Serializing Operations: 4.1% of Clockticks
                        Slow Pause: 0.0% of Clockticks
                    Mixing Vectors: 0.0% of Clockticks
                Cycles of 1 Port Utilized: 16.3% of Clockticks
                Cycles of 2 Ports Utilized: 20.8% of Clockticks
                 | This metric represents cycles fraction CPU executed total of
                 | 2 uops per cycle on all execution ports (Logical Processor
                 | cycles since ICL, Physical Core cycles otherwise). Tip: Loop
                 | Vectorization - most compilers feature auto-Vectorization
                 | options today- reduces pressure on the execution ports as
                 | multiple elements are calculated with same uop.
                 |
                Cycles of 3+ Ports Utilized: 49.5% of Clockticks
                    ALU Operation Utilization: 73.8% of Clockticks
                        Port 0: 60.6% of Clockticks
                        Port 1: 67.0% of Clockticks
                        Port 5: 63.8% of Clockticks
                        Port 6: 100.0% of Clockticks
                    Load Operation Utilization: 62.4% of Clockticks
                    Store Operation Utilization: 10.8% of Clockticks
    Average CPU Frequency: 3.173 GHz
    Total Thread Count: 3,138
    Paused Time: 0s
Effective CPU Utilization: 14.2%
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Average Effective CPU Utilization: 9.079 out of 64
Collection and Platform Info
    Application Command Line: numactl "--cpunodebind=0" "--membind=0" "./winograd" "conf/vgg16.conf" 
    Operating System: 5.15.0-100-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION="Ubuntu 22.04.4 LTS"
    Computer Name: hepnode1
    Result Size: 117.0 MB 
    Collection start time: 12:15:23 25/03/2025 UTC
    Collection stop time: 12:15:53 25/03/2025 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency: 1.995 GHz
        Logical CPU Count: 64
        LLC size: 50.3 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
数据收集成功！生成报告...
分析完成: uarch-exploration
结果保存在: vtune_results/0.3.3-vgg16/uarch-exploration_vgg16_20250325_201202



===============================================
 所有分析完成！
 结束时间: Tue Mar 25 08:16:06 PM CST 2025
 结果位置: vtune_results/0.3.3-vgg16
===============================================
创建了索引文件: vtune_results/0.3.3-vgg16/index.html
正在启动 VTune 后端服务，端口: 8080...
VTune 后端服务已启动，PID: 1705007
可通过浏览器访问: http://hepnode1:8080
后端服务将持续运行12小时，之后自动停止
VTune 分析完成。可使用以下命令停止后端服务:
kill $(cat vtune_results/0.3.3-vgg16/backend_pid.txt)
